using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class ChatProgram
{
    private TcpListener server; // 서버 객체
    private TcpClient client; // 클라이언트 객체
    private NetworkStream stream; // 네트워크 스트림 (데이터 송수신용)
    private Thread listenerThread; // 메시지 수신을 처리할 쓰레드

    // 서버를 시작하는 메서드
    public void StartServer(int port)
    {
        try
        {
            // 지정된 포트에서 모든 IP 주소로부터 연결을 대기
            server = new TcpListener(IPAddress.Any, port);
            server.Start();
            MessageBox.Show("Server started and waiting for a connection."); // 서버 시작 알림

            listenerThread = new Thread(() =>
            {
                // 클라이언트 연결 수락
                client = server.AcceptTcpClient();
                stream = client.GetStream(); // 데이터 송수신 스트림 생성
                MessageBox.Show("Client connected."); // 클라이언트 연결 알림

                while (true)
                {
                    byte[] buffer = new byte[1024]; // 수신 데이터 버퍼
                    int bytesRead = stream.Read(buffer, 0, buffer.Length); // 데이터 읽기

                    if (bytesRead == 0) // 연결 종료 확인
                        break;

                    // UTF8 형식으로 수신된 메시지 변환
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    AppendMessageToChat(message); // 채팅창에 메시지 추가
                }
            });

            listenerThread.IsBackground = true; // 백그라운드 쓰레드로 설정
            listenerThread.Start(); // 쓰레드 시작
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error starting server: " + ex.Message); // 에러 메시지 표시
        }
    }

    // 서버에 연결하는 메서드
    public void ConnectToServer(string ip, int port)
    {
        try
        {
            client = new TcpClient(); // 클라이언트 객체 생성
            client.Connect(ip, port); // 지정된 IP와 포트로 연결 시도
            stream = client.GetStream(); // 데이터 송수신 스트림 생성
            MessageBox.Show("Connected to the server."); // 연결 성공 알림

            listenerThread = new Thread(() =>
            {
                while (true)
                {
                    byte[] buffer = new byte[1024]; // 수신 데이터 버퍼
                    int bytesRead = stream.Read(buffer, 0, buffer.Length); // 데이터 읽기

                    if (bytesRead == 0) // 연결 종료 확인
                        break;

                    // UTF8 형식으로 수신된 메시지 변환
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    AppendMessageToChat(message); // 채팅창에 메시지 추가
                }
            });

            listenerThread.IsBackground = true; // 백그라운드 쓰레드로 설정
            listenerThread.Start(); // 쓰레드 시작
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error connecting to server: " + ex.Message); // 에러 메시지 표시
        }
    }

    // 메시지를 전송하는 메서드
    public void SendMessage(string message)
    {
        try
        {
            if (stream != null && stream.CanWrite) // 스트림이 유효하고 쓰기 가능할 때
            {
                byte[] data = Encoding.UTF8.GetBytes(message); // 메시지를 UTF8 형식으로 변환
                stream.Write(data, 0, data.Length); // 데이터 전송
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error sending message: " + ex.Message); // 에러 메시지 표시
        }
    }

    // 서버를 종료하는 메서드
    public void StopServer()
    {
        try
        {
            listenerThread?.Abort(); // 쓰레드 종료
            stream?.Close(); // 스트림 닫기
            client?.Close(); // 클라이언트 닫기
            server?.Stop(); // 서버 중지
            MessageBox.Show("Server stopped."); // 서버 종료 알림
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error stopping server: " + ex.Message); // 에러 메시지 표시
        }
    }

    // 수신 메시지를 채팅창에 추가하는 메서드
    private void AppendMessageToChat(string message)
    {
        // WinForms의 RichTextBox에 접근하여 메시지를 추가
        Application.OpenForms[0].Invoke((MethodInvoker)delegate
        {
            RichTextBox richTextBoxChat = (RichTextBox)Application.OpenForms[0].Controls["richTextBoxChat"];
            richTextBoxChat.AppendText(message + Environment.NewLine);
        });
    }
}
